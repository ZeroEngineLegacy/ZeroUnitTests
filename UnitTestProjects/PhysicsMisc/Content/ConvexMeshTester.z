class ConvexMeshTester : ZilchComponent
{
  [Property] var Active : Boolean = true;
  
  [Property] var ConvexMesh : ConvexMesh = ConvexMesh.Wedge;
  
  function Initialize(init : CogInitializer)
  {
    if(!this.Active)
      return;
      
    Zero.Connect(this.Owner, Events.RecordInitialization, this.OnRecordInitialization);
  }
  
  function TestRuntimeClone(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Cloned Convex Mesh:");
    stream.BeginScope();

    var clone = this.ConvexMesh.RuntimeClone();
    clone.WriteToStream(stream);
    
    stream.WriteLine("Update ConvexMesh:");
    clone.Vertices.Clear();
    clone.Vertices.Add(Real3(0));
    clone.Vertices.Add(Real3(1, 0, 0));
    clone.Vertices.Add(Real3(0, 1, 0));
    clone.Vertices.Add(Real3(0, 0, 1));
    
    clone.Indices.Clear();
    clone.Indices.Add(0);
    clone.Indices.Add(1);
    clone.Indices.Add(2);
    
    clone.Indices.Add(0);
    clone.Indices.Add(1);
    clone.Indices.Add(3);
    
    clone.Indices.Add(0);
    clone.Indices.Add(2);
    clone.Indices.Add(3);
    
    clone.Indices.Add(1);
    clone.Indices.Add(2);
    clone.Indices.Add(3);
    
    clone.WriteToStream(stream);
    
    stream.EndScope();
  }

  function TestCreateRuntime(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Create Convex Mesh:");
    stream.BeginScope();

    var convexMesh = ConvexMesh.CreateRuntime();
    convexMesh.WriteToStream(stream);
    
    stream.EndScope();
  }

  function OnRecordInitialization(event : CogFrameRecordEvent)
  {
    var stream = event.Stream;
    this.ConvexMesh.WriteToStream(stream);
    
    this.TestCreateRuntime(stream);
    this.TestRuntimeClone(stream);
    stream.WriteLine("Original Convex Mesh:");
    this.ConvexMesh.WriteToStream(stream);
  }
}

class ConvexMeshExtensions
{
  [Extension(typeid(ConvexMesh))]
  function WriteToStream(stream : UnitTestStreamWriter)
  {
    this.UpdateAndNotifyIfModified();
    stream.WriteLine("ConvexMesh: `this.Name`");
    stream.BeginScope();
    
    this.Indices.WriteToStream(stream);
    this.Vertices.WriteToStream(stream);
    
    stream.EndScope();
  }
}
