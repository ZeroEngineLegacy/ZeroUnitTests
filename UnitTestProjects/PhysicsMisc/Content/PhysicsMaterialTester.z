class PhysicsMaterialTester : ZilchComponent
{
  [Property] var Active : Boolean = true;
  
  [Dependency] var Collider : Collider;
  
  [Property] var PhysicsMaterial : PhysicsMaterial = PhysicsMaterial.TestPhysicsMaterial;
  
  function Initialize(init : CogInitializer)
  {
    if(!this.Active)
      return;
      
    Zero.Connect(this.Owner, Events.RecordInitialization, this.OnRecordInitialization);
  }
  
  function TestRuntimeClone(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Cloned Material:");
    stream.BeginScope();

    var clone = this.PhysicsMaterial.RuntimeClone();
    clone.WriteToStream(stream);
    
    stream.WriteLine("Update Material:");
    clone.Density = 15;
    clone.HighPriority = true;
    clone.Restitution = 0;
    clone.WriteToStream(stream);
    
    stream.EndScope();
  }
  
  function TestCreateRuntime(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Create Material:");
    stream.BeginScope();

    var material = PhysicsMaterial.CreateRuntime();
    material.WriteToStream(stream);
    
    stream.EndScope();
  }
  
  function OnRecordInitialization(event : CogFrameRecordEvent)
  {
    var stream = event.Stream;
    this.PhysicsMaterial.WriteToStream(stream);
    
    this.TestCreateRuntime(stream);
    this.TestRuntimeClone(stream);
    stream.WriteLine("Original Table:");
    this.PhysicsMaterial.WriteToStream(stream);
  }
}

class PhysicsMaterialExtensions
{
  [Extension(typeid(PhysicsMaterial))]
  function WriteToStream(stream : UnitTestStreamWriter)
  {
    this.UpdateAndNotifyIfModified();
    stream.WriteLine("PhysicsMaterial: `this.Name`");
    stream.BeginScope();
    
    stream.WriteLine(@this.Density);
    stream.WriteLine(@this.Friction);
    stream.WriteLine(@this.HighPriority);
    stream.WriteLine(@this.Restitution);
    
    stream.EndScope();
  }
}

