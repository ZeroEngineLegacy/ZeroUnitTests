class PhysicsMeshTester : ZilchComponent
{
  [Property] var Active : Boolean = true;
  
  [Property] var PhysicsMesh : PhysicsMesh = PhysicsMesh.TestPhysicsMesh;
  
  function Initialize(init : CogInitializer)
  {
    if(!this.Active)
      return;
      
    Zero.Connect(this.Owner, Events.RecordInitialization, this.OnRecordInitialization);
  }

  function TestRuntimeClone(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Cloned Physics Mesh:");
    stream.BeginScope();

    var clone = this.PhysicsMesh.RuntimeClone();
    clone.WriteToStream(stream);
    
    stream.WriteLine("Update Physics:");
    clone.Vertices.Clear();
    clone.Vertices.Add(Real3(0));
    clone.Vertices.Add(Real3(1, 0, 0));
    clone.Vertices.Add(Real3(0, 1, 0));
    clone.Vertices.Add(Real3(0, 0, 1));
    
    clone.Indices.Clear();
    clone.Indices.Add(0);
    clone.Indices.Add(1);
    clone.Indices.Add(2);
    
    clone.Indices.Add(0);
    clone.Indices.Add(1);
    clone.Indices.Add(3);
    
    clone.Indices.Add(0);
    clone.Indices.Add(2);
    clone.Indices.Add(3);
    
    clone.Indices.Add(1);
    clone.Indices.Add(2);
    clone.Indices.Add(3);
    
    clone.WriteToStream(stream);
    
    stream.EndScope();
  }

  function TestCreateRuntime(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Create Physics Mesh:");
    stream.BeginScope();

    var convexMesh = PhysicsMesh.CreateRuntime();
    convexMesh.WriteToStream(stream);
    
    stream.EndScope();
  }

  function OnRecordInitialization(event : CogFrameRecordEvent)
  {
    var stream = event.Stream;
    this.PhysicsMesh.WriteToStream(stream);
    
    this.TestCreateRuntime(stream);
    this.TestRuntimeClone(stream);
    stream.WriteLine("Original Physics Mesh:");
    this.PhysicsMesh.WriteToStream(stream);
  }
}

class PhysicsMeshExtensions
{
  [Extension(typeid(PhysicsMesh))]
  function WriteToStream(stream : UnitTestStreamWriter)
  {
    this.UpdateAndNotifyIfModified();
    stream.WriteLine("PhysicsMesh: `this.Name`");
    stream.BeginScope();
    
    this.Indices.WriteToStream(stream);
    this.Vertices.WriteToStream(stream);
    
    stream.EndScope();
  }
  
  [Extension(typeid(PhysicsMeshIndexData))]
  function WriteToStream(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Indices (`this.Count`):");
    stream.BeginScope();
    
    var builder = StringBuilder();
    builder.Write("[");
    for(var i = 0; i < this.Count; ++i)
    {
      builder.Write(this[i]);
      builder.Write(", ");
    }
    builder.Write("]");
    stream.WriteLine(builder.ToString());
    
    stream.EndScope();
  }
  
  [Extension(typeid(PhysicsMeshVertexData))]
  function WriteToStream(stream : UnitTestStreamWriter)
  {
    stream.WriteLine("Vertices (`this.Count`):");
    stream.BeginScope();
    
    var builder = StringBuilder();
    builder.Write("[");
    for(var i = 0; i < this.Count; ++i)
    {
      builder.Write(this[i]);
      builder.Write(", ");
    }
    builder.Write("]");
    stream.WriteLine(builder.ToString());
    
    stream.EndScope();
  }
}

